datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator markdown {
  provider = "node ./lib/executable/markdown"
  title    = "Virtual Drive System"
  output   = "./drive.md"
}

//-----------------------------------------------------------
// ACTORS
//-----------------------------------------------------------
/// Customer information, but not a person but a **connection** basis.
///
/// `drive_customers` is an entity that literally embodies the information
/// of those who participated in the drive system as customers. By the way,
/// the `drive_customers` does not mean a person, but a **connection** basis.
/// Therefore, even if the same person connects to the drive system multiple,
/// multiple records are created in `drive_customers`.
///
/// The first purpose of this is to track the customer's inflow path in detail,
/// and it is for cases where the same person enters as a non-member, reads a
/// {@link drive_repository_files repository file} in advance, and registers/logs
/// in at the moment for modification. It is the second. Lastly, it is to
/// accurately track the activities that a person performs at the drive system
/// in various ways like below.
///
/// - Same person comes from an {@link drive_external_users external service}
/// - Same person creates multiple {@link drive_members accounts}
/// - Same person makes a download with only {@link drive_citizens real name authentication}
///
/// Therefore, `drive_customers` can have multiple records with the same
/// {@link drive_citizens}, {@link drive_members}, and {@link drive_external_users}.
/// Additionally, if a customer signs up for membership after verifying their real
/// name or signs up for our service after being a user of an external service,
/// all related records are changed at once. Therefore, identification and tracking
/// of customers can be done very systematically.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_customers {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged member's {@link drive_members.id}
  ///
  /// @format uuid
  drive_member_id String? @db.Uuid /// @format uuid

  /// Belonged external service user's {@link drive_external_users.id}
  ///
  /// @format uuid
  drive_external_user_id String? @db.Uuid /// @format uuid

  /// Belonged citizen's {@link drive_citizens.id}
  ///
  /// @format uuid
  drive_citizen_id String? @db.Uuid /// @format uuid

  /// Connection URL.
  ///
  /// {@link window.location.href}
  ///
  /// @format url
  href String @db.VarChar /// @format url

  /// Referrer URL.
  ///
  /// {@link window.document.referrer}
  ///
  /// @format url
  referrer String @db.VarChar /// @format url

  /// IP address,
  ///
  /// @pattern ((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))
  ip String @db.VarChar

  /// Creation time of record.
  ///
  /// It means the time when the customer connected to the drive system.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  member                                       drive_members?                                 @relation(fields: [drive_member_id], references: [id], onDelete: Cascade)
  external_user                                drive_external_users?                          @relation(fields: [drive_external_user_id], references: [id], onDelete: Cascade)
  citizen                                      drive_citizens?                                @relation(fields: [drive_citizen_id], references: [id], onDelete: Cascade)
  drive_enterprise_employee_appointments       drive_enterprise_employee_appointments[]
  drive_enterprise_team_companion_appointments drive_enterprise_team_companion_appointments[]
  drive_repositories                           drive_repositories[]
  drive_repository_buckets                     drive_repository_buckets[]
  drive_repository_accesses                    drive_repository_accesses[]

  @@index([drive_member_id])
  @@index([drive_external_user_id])
  @@index([drive_citizen_id])
}

/// External user information.
///
/// `drive_external_users` is an entity dsigned for when this system needs
/// to connect with external services and welcome their users as customers of
/// this service.
///
/// For reference, customers who connect from an external service must have
/// this record, and the external service user is identified through the two
/// attributes `application` and `uid`. If a customer connected from an
/// external service completes {@link drive_citizens real-name authentication}
/// from this service, each time the external service user reconnects to this
/// service and issues a new {@link drive_customers customer} authentication
/// token, {@link drive_citizens real-name authentication} begins with
/// completed.
///
/// And `password` is the password issued to the user by the external service
/// system (the so-called permanent user authentication token), and is never
/// the actual user password. However, for customers who entered the same
/// `application` and `uid` as the current external system user, this is to
/// determine whether to view this as a correct external system user or a
/// violation.
///
/// In addition, additional information received from external services can
/// be recorded in the `data` field in JSON format.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_external_users {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Identifier code of the external service.
  ///
  /// It can be same with {@link drive_channels.code} in common.
  application String @db.VarChar

  /// Identifier key of external user from the external system.
  uid String @db.VarChar

  /// Nickname of external user in the external system.
  nickname String @db.VarChar

  /// Additional information about external user from the external system.
  data String?

  /// Password of external user from the external system.
  ///
  /// This is a password issued to the user by an external service, and is
  /// by no means the actual user password. However, for customers who
  /// entered the same application and code as the current external system
  /// user, this is to determine whether to view this as a correct external
  /// system user or a violation.
  password String @db.VarChar

  /// Creation time of record.
  ///
  /// Another word, first time when the external user connected.
  created_at DateTime

  //----
  // RELATIONS
  //----
  drive_customers drive_customers[]
}

/// Citizen verification information.
///
/// `drive_citizens` is an entity that records the user's real name and
/// mobile input information.
///
/// For reference, in South Korea, real name authentication is required for
/// {@link drive_enterprise_employees employeed} people, so the `name` attribute
/// is important. However, the situation is different overseas, so in reality,
/// `mobile` attributes are the most important, and identification of individual
/// users is also done based on this mobile.
///
/// Of course, real name and mobile phone authentication information are
/// encrypted and stored.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_citizens {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Mobile phone number.
  ///
  /// @pattern ^[0-9]*$
  mobile String @db.VarChar

  /// Real name, or equivalent name identifiable.
  name String @db.VarChar

  /// Creation time of record.
  ///
  /// In other words, the 1st time of citizen activation.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  drive_customers drive_customers[]
  drive_members   drive_members[]
}

/// Member Account.
///
/// `drive_members` is an entity that symbolizes the case when a user
/// signs up as a member of this system.
///
/// For reference, it is possible to travel other public
/// {@link drive_repositories repositories} without joining membership. Otherwise,
/// if you want to create your own repository or participate into some
/// {@link drive_enterprises enterprise} as an
/// {@link drive_enterprise_employees employee}, you must join as a member.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_members {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged account's {@link drive_accounts.id}
  ///
  /// @format uuid
  drive_account_id String? @db.Uuid

  /// Belonged citizen's {@link drive_citizens.id}
  ///
  /// @format uuid
  drive_citizen_id String? @db.Uuid

  /// Nickname.
  nickname String @db.VarChar

  /// Password for log-in.
  password String @db.VarChar

  /// Creation time of record.
  ///
  /// In other words, the joining time.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  withdrawn_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  account                    drive_accounts?              @relation(fields: [drive_account_id], references: [id], onDelete: Cascade)
  citizen                    drive_citizens?              @relation(fields: [drive_citizen_id], references: [id], onDelete: Cascade)
  drive_customers            drive_customers[]
  drive_member_emails        drive_member_emails[]
  drive_enterprise_employees drive_enterprise_employees[]
}

/// Email address of member.
///
/// This system allows multiple email addresses to be registered for one
/// {@link drive_members member}. If you don't have to plan such multiple
/// email addresses, just use only one.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_member_emails {
  //----
  // COLUMNS
  //----
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged member's {@link drive_members.id}
  ///
  /// @format uuid
  drive_member_id String @db.Uuid

  /// Email address.
  ///
  /// @format email
  value String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  member drive_members @relation(fields: [drive_member_id], references: [id], onDelete: Cascade)
}

/// Account entity.
///
/// `drive_accounts` is an entity that represents the accounts of the drive
/// system. An account is a subject unit with a unique identifier code and can
/// own storage, etc. For example, if the address of a specific repository on
/// GitHub is https://github.com/samchon/typia, "samchon" is the account
/// identifier and the owner of the repository called "typia".
///
/// And the account referred to here does not necessarily refer to a person. This
/// is because the account holder may be a {@link drive_members member}, but it
/// may also be an {@link drive_enterprises enterprise}. For example, in the case
/// of https://github.com/Microsoft/TypeScript, the account owner is not a person,
/// but Microsoft, an enterprise.
///
/// In addition, an account can change its owner. And when changing ownership, it
/// is also possible for the entity to change from an individual to an enterprise.
/// For example, this may be the case when an account or repository that started
/// as an individual becomes successful and is promoted to an enterprise in the
/// future.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_accounts {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Identifer code of the account.
  code String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  drive_members             drive_members[]
  drive_enterprises         drive_enterprises[]
  drive_repositories        drive_repositories[]
  drive_repository_accesses drive_repository_accesses[]

  @@unique([code])
  @@index([created_at])
}

/// Enterprise, a enterprise entity.
///
/// drive_enterprises is an entity that symbolizes an enterprise, and literally
/// refers to the subjects participating in the drive system on a enterprise basis.
/// And in the case of enterprise, unlike {@link drive_members member}, it must
/// have an {@link drive_accounts account}.
///
/// Enterprises also have as sub-entities {@link drive_enterprise_employees employees}
/// and {@link drive_enterprise_teams teams} composed of them. And among these,
/// a team can have its {@link drive_enterprise_team_companions companions}
/// collectively have the same {@link drive_repository_accesses access rights} to
/// enterprise {@link drive_repositories repositories}.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprises {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged account's {@link drive_accounts.id}
  ///
  /// @format uuid
  drive_account_id String @db.Uuid

  /// Representative name of the enterprise.
  name String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  account                    drive_accounts               @relation(fields: [drive_account_id], references: [id], onDelete: Cascade)
  drive_enterprise_employees drive_enterprise_employees[]
  drive_enterprise_teams     drive_enterprise_teams[]
}

/// Employee entity within a enterprise.
///
/// `drive_enterprise_employees` is an entity that represents employees belonging
/// to an {@link drive_enterprises enterprise}. Employees work as part of each
/// {@link drive_enterprise_teams team} within the enterprise, and are granted
/// {@link drive_repository_accesses accessibility} on a team-by-team basis from
/// the enterprise's repository.
///
/// Please note that only those who have registered as {@link drive_members members}
/// of this drive system can be
/// {@link drive_enterprise_employee_appointments appointed} as employees, and it
/// is possible for one person to belong to multiple enterprises as an employee at
/// the same time.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprise_employees {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged enterprise's {@link drive_enterprises.id}
  ///
  /// @format uuid
  drive_enterprise_id String @db.Uuid

  /// Belonged member's {@link drive_members.id}
  ///
  /// @format uuid
  drive_member_id String @db.Uuid

  /// Role of employee.
  role String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  enterprise                             drive_enterprises                        @relation(fields: [drive_enterprise_id], references: [id], onDelete: Cascade)
  member                                 drive_members                            @relation(fields: [drive_member_id], references: [id], onDelete: Cascade)
  drive_enterprise_employee_appointments drive_enterprise_employee_appointments[]
  drive_enterprise_team_companions       drive_enterprise_team_companions[]
}

/// Employee Appointment Information.
///
/// `drive_enterprise_employee_appointments` is an entity that embodies the history
/// of appointment and position change information of
/// {@link drive_enterprise_employees employees} within the
/// {@link drive_enterprises enterprise}.
///
/// Therefore, this entity record is created once when a enterprise appoints
/// an employee, and is accumulated each time the employee changes his or her
/// position thereafter.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprise_employee_appointments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged employee's {@link drive_enterprise_employees.id}
  ///
  /// @format uuid
  drive_enterprise_employee_id String @db.Uuid

  /// Creator customer's {@link drive_customers.id}
  ///
  /// @format uuid
  drive_customer_id String @db.Uuid

  /// Role of employee at that time.
  role String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  employee drive_enterprise_employees @relation(fields: [drive_enterprise_employee_id], references: [id], onDelete: Cascade)
  customer drive_customers            @relation(fields: [drive_customer_id], references: [id], onDelete: Cascade)
}

/// Team information within the enterprise.
///
/// `drive_enterprise_teams` is an entity that embodies a team within an
/// {@link drive_enterprises enterprise}. A team has
/// {@link drive_enterprise_employees employees} as
/// {@link drive_enterprise_team_companions companions}, and each team can operate
/// by receiving {@link drive_repository_accesses permission} from the enterprise's
/// {@link drive_repositories repository}.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprise_teams {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged enterprise's {@link drive_enterprises.id}
  ///
  /// @format uuid
  drive_enterprise_id String @db.Uuid

  /// Identifier code of the team.
  code String @db.VarChar

  /// Representative name of the team.
  name String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  enterprise                       drive_enterprises                  @relation(fields: [drive_enterprise_id], references: [id], onDelete: Cascade)
  drive_enterprise_team_companions drive_enterprise_team_companions[]
  drive_repository_accesses        drive_repository_accesses[]
}

/// Information about companion of teams within the enterprise.
///
/// `drive_enterprise_team_companions` is an entity that represents which
/// {@link drive_enterprise_employees employees} are participating as companion in
/// each {@link drive_enterprise_teams team} that makes up the enterprise.
///
/// For reference, employees participate as companion of a team and are assigned
/// some kind of role, which may be different from their original position.
/// Additionally, it is possible for employees to belong to multiple teams at the
/// same time. This is similar to how it was possible for one member to be
/// {@link drive_enterprise_employee_appointments appointed} as an employee at
/// multiple enterprises at the same time.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprise_team_companions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged team's {@link drive_enterprise_teams.id}
  ///
  /// @format uuid
  drive_enterprise_team_id String @db.Uuid

  /// Belonged employee's {@link drive_enterprise_employees.id}
  ///
  /// @format uuid
  drive_enterprise_employee_id String @db.Uuid

  /// Role in the team.
  role String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  team                                         drive_enterprise_teams                         @relation(fields: [drive_enterprise_team_id], references: [id], onDelete: Cascade)
  employee                                     drive_enterprise_employees                     @relation(fields: [drive_enterprise_employee_id], references: [id], onDelete: Cascade)
  drive_enterprise_team_companion_appointments drive_enterprise_team_companion_appointments[]
}

/// Appointment information for team companions within the enterprise.
///
/// `drive_enterprise_team_companion_appointments` is an entity that embodies
/// the history of appointment and role change information of
/// {@link drive_enterprise_team_companions team companion} within the
/// {@link drive_enterprises enterprise}.
///
/// Therefore, this entity record is first created when the team appoints a
/// companion, and is accumulated each time the companion changes roles
/// thereafter.
///
/// @namespace Actors
/// @erd Relations
/// @author Samchon
model drive_enterprise_team_companion_appointments {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged team companion's {@link drive_enterprise_team_companions.id}
  ///
  /// @format uuid
  drive_enterprise_team_companion_id String @db.Uuid

  /// Creator customer's {@link drive_customers.id}
  ///
  /// @format uuid
  drive_customer_id String @db.Uuid

  /// Role of team companion at that time.
  role String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  companion drive_enterprise_team_companions @relation(fields: [drive_enterprise_team_companion_id], references: [id], onDelete: Cascade)
  customer  drive_customers                  @relation(fields: [drive_customer_id], references: [id], onDelete: Cascade)
}

//-----------------------------------------------------------
// REPOSITORY
//-----------------------------------------------------------
/// Repository storing buckets.
///
/// `drive_repositories` is an entity that represents individual repositories
/// within the drive system, and is similar to the Google Drive in online services.
/// And physically, it is a concept that can be compared to a Disk Drive.
///
/// And the repository belongs to a specific {@link drive_accounts account}, and
/// the account owner who owns each repository may be a
/// {@link drive_members member} or an {@link drive_enterprises enterprise}. In
/// addition, the account owner who created the repository can use the repository
/// with fellow members or {@link drive_enterprise_teams team} companion through
/// controlling {@link drive_repository_accesses access rights} to the repository.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repositories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged account's {@link drive_accounts.id}
  ///
  /// @format uuid
  drive_account_id String @db.Uuid

  /// Creator customer's {@link drive_customers.id}
  ///
  /// @format uuid
  drive_customer_id String @db.Uuid

  /// Identifier code of repository.
  code String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  account                   drive_accounts              @relation(fields: [drive_account_id], references: [id], onDelete: Cascade)
  customer                  drive_customers             @relation(fields: [drive_customer_id], references: [id], onDelete: Cascade)
  drive_repository_buckets  drive_repository_buckets[]
  drive_repository_accesses drive_repository_accesses[]
  drive_repository_tags     drive_repository_tags[]
}

/// Bucket information within the repository.
///
/// `drive_repository_buckets` symbolizes buckets that exist in the
/// {@link drive_repositories repository}, and corresponds to the supertype
/// entities of {@link drive_repository_folders folders},
/// {@link  drive_repository_files files}, and
/// {@link drive_repository_shortcuts shortcut icons}, respectively. In other
//// words, it is a table that stores common information about files and folders.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_buckets {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged repository's {@link drive_repositories.id}
  ///
  /// @format uuid
  drive_repository_id String @db.Uuid

  /// Belonged folder's {@link drive_repository_folders.id}
  ///
  /// @format uuid
  drive_repository_folder_id String? @db.Uuid

  /// Creator customer's {@link drive_customers.id}
  ///
  /// @format uuid
  drive_customer_id String @db.Uuid

  /// Type of bucket.
  ///
  /// Discriminator of the supertype entity.
  ///
  /// - directory
  /// - file
  /// -shortcut
  type String @db.VarChar

  /// Name of the bucket.
  ///
  /// @maxLength 255
  name String @db.VarChar(255)

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  repository drive_repositories        @relation(fields: [drive_repository_id], references: [id], onDelete: Cascade)
  folder     drive_repository_folders? @relation("rel_drive_repository_bucket_parent", fields: [drive_repository_folder_id], references: [id], onDelete: Cascade)
  customer   drive_customers           @relation(fields: [drive_customer_id], references: [id], onDelete: Cascade)

  of_folder   drive_repository_folders?   @relation("rel_drive_repository_folders_base")
  of_file     drive_repository_files?
  of_shortcut drive_repository_shortcuts? @relation("rel_drive_repository_shortcuts_base")

  shortcuts drive_repository_shortcuts[] @relation("rel_drive_repository_shortcuts_target")
}

/// Folder (directory).
///
/// `drive_repository_folders` is an entity that represents a folder in the
/// {@link drive_repositories repository}.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_folders {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  ///
  /// @format uuid
  id String @id @db.Uuid

  //----
  // RELATIONS
  //----
  base     drive_repository_buckets   @relation("rel_drive_repository_folders_base", fields: [id], references: [id], onDelete: Cascade)
  children drive_repository_buckets[] @relation("rel_drive_repository_bucket_parent")
}

/// File.
///
/// `drive_repository_files` is an entity that represents files in the
/// {@link drive_repositories repository}.
///
/// And the location where the file is physically stored is recorded in the
/// attribute url.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_files {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Extension of file.
  ///
  /// @maxLength 8
  extension String? @db.VarChar(8)

  url String @db.VarChar

  //----
  // RELATIONS
  //----
  base drive_repository_buckets @relation(fields: [id], references: [id], onDelete: Cascade)
}

/// Shortcut icon.
///
/// `drive_repository_shortcuts` is an entity that symbolizes a shortcut icon in
/// the {@link drive_repositories repository} and has a reference function for
/// other {@link drive_repository_buckets buckets} in the repository.
///
/// A concept that is exactly the same as a shortcut icon in Windows and
/// a symbolic link in Linux.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_shortcuts {
  //----
  // COLUMNS
  //----
  /// PK + FK.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Target bucket's {@link drive_repository_buckets.id}
  ///
  /// This shortcut references the target bucket.
  drive_repository_bucket_id String @db.Uuid

  //----
  // RELATIONS
  //----
  base   drive_repository_buckets @relation("rel_drive_repository_shortcuts_base", fields: [id], references: [id], onDelete: Cascade)
  target drive_repository_buckets @relation("rel_drive_repository_shortcuts_target", fields: [drive_repository_bucket_id], references: [id], onDelete: Cascade)
}

/// Storage access control.
///
/// `drive_repository_accesses` is an entity that embodies the access authority
/// control of the {@link drive_repositories repository}, and is an entity that
/// is recorded when the {@link drive_accounts account} owner distributes the
/// authority of the repository to other {@link drive_members members} or an
/// {@link drive_enterprise_teams enterprise team}.
///
/// For reference, the account owner who created the repository is also recorded
/// in access permission control. In other words, as soon as the account owner
/// creates the repository, one table record is created and started.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_accesses {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged repository's {@link drive_repositories.id}
  ///
  /// @format uuid
  drive_repository_id String @db.Uuid

  /// Creator customer's {@link drive_customers.id}
  ///
  /// @format uuid
  drive_customer_id String @db.Uuid

  /// Target account's {@link drive_members.id}
  drive_account_id String? @db.Uuid

  /// Target enterprise team's {@link drive_enterprise_teams.id}
  drive_enterprise_team_id String? @db.Uuid

  /// Role of access permission.
  role String @db.VarChar

  /// Creation time of record.
  created_at DateTime @db.Timestamptz

  /// Update time of record.
  updated_at DateTime @db.Timestamptz

  /// Deletion time of record.
  deleted_at DateTime? @db.Timestamptz

  //----
  // RELATIONS
  //----
  repository drive_repositories      @relation(fields: [drive_repository_id], references: [id], onDelete: Cascade)
  customer   drive_customers         @relation(fields: [drive_customer_id], references: [id], onDelete: Cascade)
  account    drive_accounts?         @relation(fields: [drive_account_id], references: [id], onDelete: Cascade)
  team       drive_enterprise_teams? @relation(fields: [drive_enterprise_team_id], references: [id], onDelete: Cascade)
}

/// Search tag of repository.
///
/// @namespace Repositories
/// @erd Relations
/// @author Samchon
model drive_repository_tags {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id String @id @db.Uuid

  /// Belonged repository's {@link drive_repositories.id}
  drive_repository_id String @db.Uuid

  /// Search tag value.
  value String @db.VarChar

  /// Creation time of record.
  sequence Int @db.Integer

  created_at DateTime @db.Timestamptz

  //----
  // RELATIONS
  //----
  repository drive_repositories @relation(fields: [drive_repository_id], references: [id], onDelete: Cascade)
}
